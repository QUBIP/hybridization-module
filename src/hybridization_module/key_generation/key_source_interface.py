

from abc import ABC, abstractmethod

from hybridization_module.model.requests import OpenConnectQos
from hybridization_module.model.shared_enums import KeyType


class KeySource(ABC):

    @classmethod
    @abstractmethod
    def get_key_type(cls) -> KeyType:
        """Returns the kind of key (QKD, PQC, etc) the source produces."""

    @abstractmethod
    def get_id(self) -> str:
        """Returns the id of the source, once the source is created the id cannot change.

        Returns:
            str: id of the source instance (key_type)-(uuid of the source).
        """

    @abstractmethod
    def open_connect(self, hybrid_ksid: str, qos: OpenConnectQos, timeout: int = 10) -> None:
        """Starts any connection required to obtain key and setsup the QoS for said connection.

        Args:
            hybrid_ksid (str) : The key_stream_id of the connection between hybridization modules.
            qos (OpenConnectQos): The quality of service the source has to meet.
            timeout (int): Maximum number of seconds can be functioning before giving a timeout error.
        """
        pass

    @abstractmethod
    def get_key(self, retries: int = 5, timeout: int = 10) -> bytes:
        """Returns key based on the parameters given in the initilization and the open_connect()

        This function does not work if called before the open_connect() or after the close()

        Args:
            retries (int): Number of retries in the case of errors (Timeout errors do not count).
            timeout (int): Maximum number of seconds this method can be functioning before giving a timeout error.

        Returns:
            bytes: The key generated by the source (Its size is determined in the open_connect())
        """
        pass

    @abstractmethod
    def close(self) -> None:
        """Closes any connection the key source has.

        After this operation, the key source can no longer be used.
        """
        pass